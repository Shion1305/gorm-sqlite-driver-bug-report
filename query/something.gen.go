// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-bug-recreate/domain"
)

func newSomething(db *gorm.DB, opts ...gen.DOOption) something {
	_something := something{}

	_something.somethingDo.UseDB(db, opts...)
	_something.somethingDo.UseModel(&domain.Something{})

	tableName := _something.somethingDo.TableName()
	_something.ALL = field.NewAsterisk(tableName)
	_something.Column1 = field.NewInt32(tableName, "column1")
	_something.Column2 = field.NewInt32(tableName, "column2")
	_something.Column3 = field.NewInt32(tableName, "column3")

	_something.fillFieldMap()

	return _something
}

type something struct {
	somethingDo

	ALL     field.Asterisk
	Column1 field.Int32
	Column2 field.Int32
	Column3 field.Int32

	fieldMap map[string]field.Expr
}

func (s something) Table(newTableName string) *something {
	s.somethingDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s something) As(alias string) *something {
	s.somethingDo.DO = *(s.somethingDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *something) updateTableName(table string) *something {
	s.ALL = field.NewAsterisk(table)
	s.Column1 = field.NewInt32(table, "column1")
	s.Column2 = field.NewInt32(table, "column2")
	s.Column3 = field.NewInt32(table, "column3")

	s.fillFieldMap()

	return s
}

func (s *something) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *something) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["column1"] = s.Column1
	s.fieldMap["column2"] = s.Column2
	s.fieldMap["column3"] = s.Column3
}

func (s something) clone(db *gorm.DB) something {
	s.somethingDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s something) replaceDB(db *gorm.DB) something {
	s.somethingDo.ReplaceDB(db)
	return s
}

type somethingDo struct{ gen.DO }

type ISomethingDo interface {
	gen.SubQuery
	Debug() ISomethingDo
	WithContext(ctx context.Context) ISomethingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISomethingDo
	WriteDB() ISomethingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISomethingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISomethingDo
	Not(conds ...gen.Condition) ISomethingDo
	Or(conds ...gen.Condition) ISomethingDo
	Select(conds ...field.Expr) ISomethingDo
	Where(conds ...gen.Condition) ISomethingDo
	Order(conds ...field.Expr) ISomethingDo
	Distinct(cols ...field.Expr) ISomethingDo
	Omit(cols ...field.Expr) ISomethingDo
	Join(table schema.Tabler, on ...field.Expr) ISomethingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISomethingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISomethingDo
	Group(cols ...field.Expr) ISomethingDo
	Having(conds ...gen.Condition) ISomethingDo
	Limit(limit int) ISomethingDo
	Offset(offset int) ISomethingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISomethingDo
	Unscoped() ISomethingDo
	Create(values ...*domain.Something) error
	CreateInBatches(values []*domain.Something, batchSize int) error
	Save(values ...*domain.Something) error
	First() (*domain.Something, error)
	Take() (*domain.Something, error)
	Last() (*domain.Something, error)
	Find() ([]*domain.Something, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.Something, err error)
	FindInBatches(result *[]*domain.Something, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.Something) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISomethingDo
	Assign(attrs ...field.AssignExpr) ISomethingDo
	Joins(fields ...field.RelationField) ISomethingDo
	Preload(fields ...field.RelationField) ISomethingDo
	FirstOrInit() (*domain.Something, error)
	FirstOrCreate() (*domain.Something, error)
	FindByPage(offset int, limit int) (result []*domain.Something, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISomethingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s somethingDo) Debug() ISomethingDo {
	return s.withDO(s.DO.Debug())
}

func (s somethingDo) WithContext(ctx context.Context) ISomethingDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s somethingDo) ReadDB() ISomethingDo {
	return s.Clauses(dbresolver.Read)
}

func (s somethingDo) WriteDB() ISomethingDo {
	return s.Clauses(dbresolver.Write)
}

func (s somethingDo) Session(config *gorm.Session) ISomethingDo {
	return s.withDO(s.DO.Session(config))
}

func (s somethingDo) Clauses(conds ...clause.Expression) ISomethingDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s somethingDo) Returning(value interface{}, columns ...string) ISomethingDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s somethingDo) Not(conds ...gen.Condition) ISomethingDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s somethingDo) Or(conds ...gen.Condition) ISomethingDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s somethingDo) Select(conds ...field.Expr) ISomethingDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s somethingDo) Where(conds ...gen.Condition) ISomethingDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s somethingDo) Order(conds ...field.Expr) ISomethingDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s somethingDo) Distinct(cols ...field.Expr) ISomethingDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s somethingDo) Omit(cols ...field.Expr) ISomethingDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s somethingDo) Join(table schema.Tabler, on ...field.Expr) ISomethingDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s somethingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISomethingDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s somethingDo) RightJoin(table schema.Tabler, on ...field.Expr) ISomethingDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s somethingDo) Group(cols ...field.Expr) ISomethingDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s somethingDo) Having(conds ...gen.Condition) ISomethingDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s somethingDo) Limit(limit int) ISomethingDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s somethingDo) Offset(offset int) ISomethingDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s somethingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISomethingDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s somethingDo) Unscoped() ISomethingDo {
	return s.withDO(s.DO.Unscoped())
}

func (s somethingDo) Create(values ...*domain.Something) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s somethingDo) CreateInBatches(values []*domain.Something, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s somethingDo) Save(values ...*domain.Something) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s somethingDo) First() (*domain.Something, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Something), nil
	}
}

func (s somethingDo) Take() (*domain.Something, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Something), nil
	}
}

func (s somethingDo) Last() (*domain.Something, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Something), nil
	}
}

func (s somethingDo) Find() ([]*domain.Something, error) {
	result, err := s.DO.Find()
	return result.([]*domain.Something), err
}

func (s somethingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.Something, err error) {
	buf := make([]*domain.Something, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s somethingDo) FindInBatches(result *[]*domain.Something, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s somethingDo) Attrs(attrs ...field.AssignExpr) ISomethingDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s somethingDo) Assign(attrs ...field.AssignExpr) ISomethingDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s somethingDo) Joins(fields ...field.RelationField) ISomethingDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s somethingDo) Preload(fields ...field.RelationField) ISomethingDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s somethingDo) FirstOrInit() (*domain.Something, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Something), nil
	}
}

func (s somethingDo) FirstOrCreate() (*domain.Something, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Something), nil
	}
}

func (s somethingDo) FindByPage(offset int, limit int) (result []*domain.Something, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s somethingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s somethingDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s somethingDo) Delete(models ...*domain.Something) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *somethingDo) withDO(do gen.Dao) *somethingDo {
	s.DO = *do.(*gen.DO)
	return s
}
